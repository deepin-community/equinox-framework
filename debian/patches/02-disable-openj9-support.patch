Description: Disable OpenJ9 features
Author: Emmanuel Bourg <ebourg@apache.org>
Forwarded: not-needed
--- a/bundles/org.eclipse.osgi/container/src/org/eclipse/osgi/internal/hookregistry/HookRegistry.java
+++ b/bundles/org.eclipse.osgi/container/src/org/eclipse/osgi/internal/hookregistry/HookRegistry.java
@@ -23,7 +23,6 @@
 import java.util.List;
 import java.util.Properties;
 import org.eclipse.osgi.framework.log.FrameworkLogEntry;
-import org.eclipse.osgi.internal.cds.CDSHookConfigurator;
 import org.eclipse.osgi.internal.connect.ConnectHookConfigurator;
 import org.eclipse.osgi.internal.framework.EquinoxConfiguration;
 import org.eclipse.osgi.internal.framework.EquinoxContainer;
@@ -114,7 +113,6 @@
 			addClassLoaderHook(new EclipseLazyStarter(container));
 			addClassLoaderHook(new WeavingHookConfigurator(container));
 			configurators.add(SignedBundleHook.class.getName());
-			configurators.add(CDSHookConfigurator.class.getName());
 			loadConfigurators(configurators, errors);
 			// set to read-only
 			initialized = true;
--- a/bundles/org.eclipse.osgi/container/src/org/eclipse/osgi/internal/cds/CDSBundleEntry.java
+++ /dev/null
@@ -1,124 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2006, 2018 IBM Corp. and others
- *
- * This program and the accompanying materials are made available under
- * the terms of the Eclipse Public License 2.0 which accompanies this
- * distribution and is available at https://www.eclipse.org/legal/epl-2.0/
- * or the Apache License, Version 2.0 which accompanies this distribution and
- * is available at https://www.apache.org/licenses/LICENSE-2.0.
- *
- * This Source Code may also be made available under the following
- * Secondary Licenses when the conditions for such availability set
- * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU
- * General Public License, version 2 with the GNU Classpath
- * Exception [1] and GNU General Public License, version 2 with the
- * OpenJDK Assembly Exception [2].
- *
- * [1] https://www.gnu.org/software/classpath/license.html
- * [2] http://openjdk.java.net/legal/assembly-exception.html
- *
- * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception
- *******************************************************************************/
-
-package org.eclipse.osgi.internal.cds;
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.net.URL;
-import org.eclipse.osgi.storage.bundlefile.BundleEntry;
-
-/**
- * A bundle entry for a class that is found in the shared classes cache
- */
-public class CDSBundleEntry extends BundleEntry {
-	final String path;
-	final byte[] classbytes;
-	final CDSBundleFile bundleFile;
-
-	/**
-	 * The constructor
-	 * @param path the path to the class file
-	 * @param classbytes the magic cookie bytes for the class in the shared cache
-	 * @param bundleFile the bundle file where the class comes from
-	 */
-	public CDSBundleEntry(String path, byte[] classbytes, CDSBundleFile bundleFile) {
-		super();
-		this.path = path;
-		this.classbytes = classbytes;
-		this.bundleFile = bundleFile;
-	}
-
-	private BundleEntry getWrappedEntry() {
-		BundleEntry entry = bundleFile.getWrappedEntry(path);
-		if (entry == null) {
-			throw new IllegalStateException("Could not find original entry for the class: " + path); //$NON-NLS-1$
-		}
-		return entry;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.eclipse.osgi.baseadaptor.bundlefile.BundleEntry#getFileURL()
-	 * uses the wrapped bundle file to get the actual file url to the content of
-	 * the class on disk.
-	 *
-	 * This should is likely never to be called.
-	 */
-	@Override
-	public URL getFileURL() {
-		return getWrappedEntry().getFileURL();
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.eclipse.osgi.baseadaptor.bundlefile.BundleEntry#getInputStream()
-	 * wraps the classbytes into a ByteArrayInputStream.  This should not be used
-	 * by classloading.
-	 */
-	@Override
-	public InputStream getInputStream() throws IOException {
-		// someone is trying to get the real bytes of the class file!!
-		// just return the entry from the wrapped file instead of the magic cookie
-		return getWrappedEntry().getInputStream();
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.eclipse.osgi.baseadaptor.bundlefile.BundleEntry#getBytes()
-	 * if classbytes is not null, it returns the magic cookie for the shared class.  This is used to define
-	 * the class during class loading.
-	 * if classbytes is null, it gets the contents from actual BundleEntry and caches it in classbytes.
-	 */
-	@Override
-	public byte[] getBytes() throws IOException {
-		return classbytes;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.eclipse.osgi.baseadaptor.bundlefile.BundleEntry#getLocalURL()
-	 * uses the wrapped bundle file to get the actual local url to the content of
-	 * the class on disk.
-	 *
-	 * This should is likely never to be called.
-	 */
-	@Override
-	public URL getLocalURL() {
-		return getWrappedEntry().getLocalURL();
-	}
-
-	@Override
-	public String getName() {
-		return path;
-	}
-
-	@Override
-	public long getSize() {
-		return getWrappedEntry().getSize();
-	}
-
-	@Override
-	public long getTime() {
-		return getWrappedEntry().getTime();
-	}
-}
--- a/bundles/org.eclipse.osgi/container/src/org/eclipse/osgi/internal/cds/CDSBundleFile.java
+++ /dev/null
@@ -1,145 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2006, 2018 IBM Corp. and others
- *
- * This program and the accompanying materials are made available under
- * the terms of the Eclipse Public License 2.0 which accompanies this
- * distribution and is available at https://www.eclipse.org/legal/epl-2.0/
- * or the Apache License, Version 2.0 which accompanies this distribution and
- * is available at https://www.apache.org/licenses/LICENSE-2.0.
- *
- * This Source Code may also be made available under the following
- * Secondary Licenses when the conditions for such availability set
- * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU
- * General Public License, version 2 with the GNU Classpath
- * Exception [1] and GNU General Public License, version 2 with the
- * OpenJDK Assembly Exception [2].
- *
- * [1] https://www.gnu.org/software/classpath/license.html
- * [2] http://openjdk.java.net/legal/assembly-exception.html
- *
- * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception
- *******************************************************************************/
-
-package org.eclipse.osgi.internal.cds;
-
-import com.ibm.oti.shared.SharedClassURLHelper;
-import java.net.MalformedURLException;
-import java.net.URL;
-import org.eclipse.osgi.storage.bundlefile.BundleEntry;
-import org.eclipse.osgi.storage.bundlefile.BundleFile;
-import org.eclipse.osgi.storage.bundlefile.BundleFileWrapper;
-
-/**
- * Wraps an actual BundleFile object for purposes of loading classes from the
- * shared classes cache.
- */
-public class CDSBundleFile extends BundleFileWrapper {
-	private final static String classFileExt = ".class"; //$NON-NLS-1$
-	private final URL url; // the URL to the content of the real bundle file
-	private SharedClassURLHelper urlHelper; // the url helper set by the classloader
-	private boolean primed = false;
-
-	/**
-	 * The constructor
-	 * @param wrapped the real bundle file
-	 */
-	public CDSBundleFile(BundleFile wrapped) {
-		super(wrapped);
-		// get the url to the content of the real bundle file
-		URL content = null;
-		try {
-			content = new URL("file", "", wrapped.getBaseFile().getAbsolutePath()); //$NON-NLS-1$ //$NON-NLS-2$
-		} catch (MalformedURLException e) {
-			// do nothing
-		}
-		this.url = content;
-	}
-
-	public CDSBundleFile(BundleFile bundleFile, SharedClassURLHelper urlHelper) {
-		this(bundleFile);
-		this.urlHelper = urlHelper;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.eclipse.osgi.storage.bundlefile.BundleFile#getEntry(java.lang.String)
-	 *
-	 * If path is not for a class then just use the wrapped bundle file to answer the call.
-	 * If the path is for a class, it returns a CDSBundleEntry object.
-	 * If the path is for a class, it will look for the magic cookie in the
-	 * shared classes cache. If found, the bytes representing the magic cookie are stored in CDSBundleEntry object.
-	 */
-	@Override
-	public BundleEntry getEntry(String path) {
-		if (!primed || !path.endsWith(classFileExt)) {
-			return super.getEntry(path);
-		}
-		byte[] classbytes = getClassBytes(path.substring(0, path.length() - classFileExt.length()));
-		if (classbytes == null) {
-			return super.getEntry(path);
-		}
-
-		BundleEntry be = new CDSBundleEntry(path, classbytes, this);
-		return be;
-	}
-
-	BundleEntry getWrappedEntry(String path) {
-		return super.getEntry(path);
-	}
-
-	/**
-	 * Returns the file url to the content of the actual bundle file
-	 * @return the file url to the content of the actual bundle file
-	 */
-	URL getURL() {
-		return url;
-	}
-
-	/**
-	 * Returns the url helper for this bundle file.  This is set by the
-	 * class loading hook
-	 * @return the url helper for this bundle file
-	 */
-	SharedClassURLHelper getURLHelper() {
-		return urlHelper;
-	}
-
-	/**
-	 * Sets the url helper for this bundle file.  This is called by the
-	 * class loading hook.
-	 * @param urlHelper the url helper
-	 */
-	void setURLHelper(SharedClassURLHelper urlHelper) {
-		this.urlHelper = urlHelper;
-		this.primed = false; // always unprime when a new urlHelper is set
-	}
-
-	/**
-	 * Sets the primed flag for the bundle file.  This is called by the
-	 * class loading hook after the first class has been loaded from disk for
-	 * this bundle file.
-	 * @param primed the primed flag
-	 */
-	void setPrimed(boolean primed) {
-		this.primed = primed;
-	}
-
-	/**
-	 * Searches in the shared classes cache for the specified class name.
-	 * @param name the name of the class
-	 * @return the magic cookie to the shared class or null if the class is not in the cache.
-	 */
-	private byte[] getClassBytes(String name) {
-		if (urlHelper == null || url == null)
-			return null;
-		return urlHelper.findSharedClass(null, url, name);
-	}
-
-	/**
-	 * Returns the primed flag for this bundle file.
-	 * @return the primed flag
-	 */
-	public boolean getPrimed() {
-		return this.primed;
-	}
-}
--- a/bundles/org.eclipse.osgi/container/src/org/eclipse/osgi/internal/cds/CDSHookConfigurator.java
+++ /dev/null
@@ -1,68 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2006, 2018 IBM Corp. and others
- *
- * This program and the accompanying materials are made available under
- * the terms of the Eclipse Public License 2.0 which accompanies this
- * distribution and is available at https://www.eclipse.org/legal/epl-2.0/
- * or the Apache License, Version 2.0 which accompanies this distribution and
- * is available at https://www.apache.org/licenses/LICENSE-2.0.
- *
- * This Source Code may also be made available under the following
- * Secondary Licenses when the conditions for such availability set
- * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU
- * General Public License, version 2 with the GNU Classpath
- * Exception [1] and GNU General Public License, version 2 with the
- * OpenJDK Assembly Exception [2].
- *
- * [1] https://www.gnu.org/software/classpath/license.html
- * [2] http://openjdk.java.net/legal/assembly-exception.html
- *
- * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception
- *******************************************************************************/
-
-package org.eclipse.osgi.internal.cds;
-
-import org.eclipse.osgi.framework.log.FrameworkLogEntry;
-import org.eclipse.osgi.internal.framework.EquinoxContainer;
-import org.eclipse.osgi.internal.hookregistry.HookConfigurator;
-import org.eclipse.osgi.internal.hookregistry.HookRegistry;
-import org.eclipse.osgi.internal.log.EquinoxLogServices;
-
-public class CDSHookConfigurator implements HookConfigurator {
-
-	private static final String REPORT_ERRORS = "j9.cds.reporterrors"; //$NON-NLS-1$
-	private static final String DISABLE_CDS = "j9.cds.disable"; //$NON-NLS-1$
-	private static final String OLD_CDS_CONFIGURATOR = "com.ibm.cds.CDSHookConfigurator"; //$NON-NLS-1$
-	private static final String J9_SHARED_CLASS_HELPER_CLASS = "com.ibm.oti.shared.SharedClassHelperFactory"; //$NON-NLS-1$
-
-	@Override
-	public void addHooks(HookRegistry hookRegistry) {
-		boolean disableCDS = Boolean.valueOf(hookRegistry.getConfiguration().getProperty(DISABLE_CDS));
-		if (disableCDS) {
-			return;
-		}
-		// check for the external com.ibm.cds system.bundle fragment
-		try {
-			Class.forName(OLD_CDS_CONFIGURATOR);
-			// the old com.ibm.cds fragment is installed; disable build-in one
-			return;
-		} catch (ClassNotFoundException e) {
-			// expected
-		}
-		try {
-			Class.forName(J9_SHARED_CLASS_HELPER_CLASS);
-		} catch (ClassNotFoundException e) {
-			boolean reportErrors = Boolean.valueOf(hookRegistry.getConfiguration().getProperty(REPORT_ERRORS));
-			// not running on J9
-			if (reportErrors) {
-				EquinoxContainer container = hookRegistry.getContainer();
-				EquinoxLogServices logServices = container.getLogServices();
-				logServices.log(EquinoxContainer.NAME, FrameworkLogEntry.WARNING, "The J9 Class Sharing Adaptor will not work in this configuration. You are not running on a J9 Java VM.", null); //$NON-NLS-1$
-			}
-			return;
-		}
-
-		new CDSHookImpls().registerHooks(hookRegistry);
-	}
-
-}
--- a/bundles/org.eclipse.osgi/container/src/org/eclipse/osgi/internal/cds/CDSHookImpls.java
+++ /dev/null
@@ -1,224 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2006, 2018 IBM Corp. and others
- *
- * This program and the accompanying materials are made available under
- * the terms of the Eclipse Public License 2.0 which accompanies this
- * distribution and is available at https://www.eclipse.org/legal/epl-2.0/
- * or the Apache License, Version 2.0 which accompanies this distribution and
- * is available at https://www.apache.org/licenses/LICENSE-2.0.
- *
- * This Source Code may also be made available under the following
- * Secondary Licenses when the conditions for such availability set
- * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU
- * General Public License, version 2 with the GNU Classpath
- * Exception [1] and GNU General Public License, version 2 with the
- * OpenJDK Assembly Exception [2].
- *
- * [1] https://www.gnu.org/software/classpath/license.html
- * [2] http://openjdk.java.net/legal/assembly-exception.html
- *
- * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception
- *******************************************************************************/
-
-package org.eclipse.osgi.internal.cds;
-
-import com.ibm.oti.shared.HelperAlreadyDefinedException;
-import com.ibm.oti.shared.Shared;
-import com.ibm.oti.shared.SharedClassHelperFactory;
-import com.ibm.oti.shared.SharedClassURLHelper;
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Arrays;
-import org.eclipse.osgi.internal.hookregistry.BundleFileWrapperFactoryHook;
-import org.eclipse.osgi.internal.hookregistry.ClassLoaderHook;
-import org.eclipse.osgi.internal.hookregistry.HookRegistry;
-import org.eclipse.osgi.internal.loader.ModuleClassLoader;
-import org.eclipse.osgi.internal.loader.classpath.ClasspathEntry;
-import org.eclipse.osgi.internal.loader.classpath.ClasspathManager;
-import org.eclipse.osgi.internal.loader.classpath.FragmentClasspath;
-import org.eclipse.osgi.storage.BundleInfo.Generation;
-import org.eclipse.osgi.storage.ContentProvider.Type;
-import org.eclipse.osgi.storage.bundlefile.BundleEntry;
-import org.eclipse.osgi.storage.bundlefile.BundleFile;
-import org.eclipse.osgi.storage.bundlefile.BundleFileWrapper;
-import org.eclipse.osgi.storage.bundlefile.BundleFileWrapperChain;
-
-public class CDSHookImpls extends ClassLoaderHook implements BundleFileWrapperFactoryHook {
-	private static SharedClassHelperFactory factory = Shared.getSharedClassHelperFactory();
-
-	// With Equinox bug 226038 (v3.4), the framework will now pass an instance
-	// of BundleFileWrapperChain rather than the wrapped BundleFile.  This is
-	// so that multiple wrapping hooks can each wrap the BundleFile and all
-	// wrappers are accessible.
-	//
-	// The Wrapper chain will look like below:
-	// WrapperChain -> Wrapper<N> -> WrapperChain -> CDSBundleFile -> WrapperChain -> BundleFile
-	//
-	private static CDSBundleFile getCDSBundleFile(BundleFile bundleFile) {
-		if (bundleFile instanceof BundleFileWrapperChain) {
-			return ((BundleFileWrapperChain) bundleFile).getWrappedType(CDSBundleFile.class);
-		}
-		return null;
-	}
-
-	@Override
-	public void recordClassDefine(String name, Class<?> clazz, byte[] classbytes, ClasspathEntry classpathEntry, BundleEntry entry, ClasspathManager manager) { // only attempt to record the class define if:
-		// 1) the class was found (clazz != null)
-		// 2) the class has the magic class number CAFEBABE indicating a real class
-		// 3) the bundle file for the classpath entry is of type CDSBundleFile
-		// 4) class bytes is same as passed to weaving hook i.e. weaving hook did not modify the class bytes
-		if ((null == clazz) || (false == hasMagicClassNumber(classbytes)) || (null == getCDSBundleFile(classpathEntry.getBundleFile()))) {
-			return;
-		}
-		try {
-			// check if weaving hook modified the class bytes
-			byte originalClassBytes[] = entry.getBytes();
-			if (originalClassBytes != classbytes) {
-				// weaving hook has potentially modified the class bytes
-				boolean modified = false;
-				if (originalClassBytes.length == classbytes.length) {
-					// do a byte-by-byte comparison
-					modified = !Arrays.equals(classbytes, originalClassBytes);
-				} else {
-					modified = true;
-				}
-				if (modified) {
-					// Class bytes have been modified by weaving hooks.
-					// Such classes need to be stored as Orphans, so skip the call to storeSharedClass()
-					return;
-				}
-			}
-		} catch (IOException e) {
-			// this should never happen, but in case it does, its safe to return
-			return;
-		}
-
-		CDSBundleFile cdsFile = getCDSBundleFile(classpathEntry.getBundleFile());
-
-		if (null == cdsFile.getURL()) {
-			// something went wrong trying to determine the url to the real bundle file
-			return;
-		}
-
-		// look for the urlHelper; if it does not exist then we are not sharing for this class loader
-		SharedClassURLHelper urlHelper = cdsFile.getURLHelper();
-		if (urlHelper == null) {
-			// this should never happen but just in case get the helper from the base host bundle file.
-			CDSBundleFile hostBundleFile = getCDSBundleFile(manager.getGeneration().getBundleFile());
-			if (null != hostBundleFile) {
-				// try getting the helper from the host base cdsFile
-				urlHelper = hostBundleFile.getURLHelper();
-			}
-
-			if (null != urlHelper) {
-				cdsFile.setURLHelper(urlHelper);
-			}
-		}
-		if (null != urlHelper) {
-			// store the class in the cache
-			urlHelper.storeSharedClass(null, cdsFile.getURL(), clazz);
-			cdsFile.setPrimed(true);
-		}
-	}
-
-	private boolean hasMagicClassNumber(byte[] classbytes) {
-		if (classbytes == null || classbytes.length < 4)
-			return false;
-		// TODO maybe there is a better way to do this? I'm not sure why I had to AND each byte with the value I was checking ...
-		return (classbytes[0] & 0xCA) == 0xCA && (classbytes[1] & 0xFE) == 0xFE && (classbytes[2] & 0xBA) == 0xBA && (classbytes[3] & 0xBE) == 0xBE;
-	}
-
-	@Override
-	public void classLoaderCreated(ModuleClassLoader classLoader) {
-		// try to get the url helper for this class loader
-		if (factory == null) {
-			return;
-		}
-		try {
-			SharedClassURLHelper urlHelper = factory.getURLHelper(classLoader);
-			boolean minimizeUpdateChecks = urlHelper.setMinimizeUpdateChecks();
-			// set the url helper for the host base CDSBundleFile
-			CDSBundleFile hostFile = getCDSBundleFile(classLoader.getClasspathManager().getGeneration().getBundleFile());
-			if (hostFile != null) {
-				hostFile.setURLHelper(urlHelper);
-				if (minimizeUpdateChecks) {
-					// no need to prime if we were able to setMinimizeUpdateChecks
-					hostFile.setPrimed(true);
-				}
-			}
-			// No need to prime if we were able to setMinimizeUpdateChecks.
-			// Mark all the BundleFiles on the classpath as primed.
-			ClasspathManager cpManager = classLoader.getClasspathManager();
-			for (ClasspathEntry entry : cpManager.getHostClasspathEntries()) {
-				CDSBundleFile cdsBundleFile = getCDSBundleFile(entry.getBundleFile());
-				if (cdsBundleFile != null) {
-					cdsBundleFile.setURLHelper(urlHelper);
-					if (minimizeUpdateChecks) {
-						cdsBundleFile.setPrimed(true);
-					}
-				}
-			}
-			for (FragmentClasspath fragCP : cpManager.getFragmentClasspaths()) {
-				for (ClasspathEntry entry : fragCP.getEntries()) {
-					CDSBundleFile cdsBundleFile = getCDSBundleFile(entry.getBundleFile());
-					if (cdsBundleFile != null) {
-						cdsBundleFile.setURLHelper(urlHelper);
-						if (minimizeUpdateChecks) {
-							cdsBundleFile.setPrimed(true);
-						}
-					}
-				}
-			}
-		} catch (HelperAlreadyDefinedException e) {
-			// We should never get here.
-			// If we do, we simply won't share for this ClassLoader
-		}
-	}
-
-	@Override
-	public boolean addClassPathEntry(ArrayList<ClasspathEntry> cpEntries, String cp, ClasspathManager hostmanager, Generation sourceGeneration) {
-		CDSBundleFile hostFile = getCDSBundleFile(hostmanager.getGeneration().getBundleFile());
-		CDSBundleFile sourceFile = getCDSBundleFile(sourceGeneration.getBundleFile());
-		if ((hostFile != sourceFile) && (null != hostFile) && (null != sourceFile)) {
-			// Set the helper that got set on the host base bundle file in classLoaderCreated.
-			// This is to handle the case where fragments are dynamically attached
-			SharedClassURLHelper urlHelper = hostFile.getURLHelper();
-			sourceFile.setURLHelper(urlHelper);
-			sourceFile.setPrimed(hostFile.getPrimed());
-		}
-
-		return false;
-	}
-
-	//////////////// BundleFileWrapperFactoryHook //////////////
-	@Override
-	public BundleFileWrapper wrapBundleFile(BundleFile bundleFile, Generation generation, boolean base) {
-		if (generation.getContentType() == Type.CONNECT) {
-			return null;
-		}
-		// wrap the real bundle file for purposes of loading shared classes.
-		CDSBundleFile newBundleFile;
-		if (!base && generation.getBundleInfo().getBundleId() != 0) {
-			// initialize the urlHelper from the base one.
-			SharedClassURLHelper urlHelper = null;
-			BundleFile baseFile = generation.getBundleFile();
-			if ((baseFile = getCDSBundleFile(baseFile)) != null) {
-				urlHelper = ((CDSBundleFile) baseFile).getURLHelper();
-			}
-			newBundleFile = new CDSBundleFile(bundleFile, urlHelper);
-		} else {
-			newBundleFile = new CDSBundleFile(bundleFile);
-		}
-
-		return newBundleFile;
-	}
-
-	void registerHooks(HookRegistry hookRegistry) {
-		// only register if sharing is enabled
-		if (!Shared.isSharingEnabled()) {
-			return;
-		}
-		hookRegistry.addClassLoaderHook(this);
-		hookRegistry.addBundleFileWrapperFactoryHook(this);
-	}
-}
